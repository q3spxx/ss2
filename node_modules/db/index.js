'use strict'

var sqlite3 = require('sqlite3').verbose();
var db = new sqlite3.Database('./node_modules/db/data.db');
// db.run("CREATE TABLE movies (name TEXT, format INT)")
// //db.run("DROP TABLE test3")
// //db.run("ALTER TABLE test3 ADD cd TEXT")
// //db.run("INSERT INTO movies (name, format) VALUES ('Kubo', 0)")
// //db.run("DELETE FROM test3")
// //db.run("UPDATE test3 SET d = 18 WHERE info='qqqq'")
// db.all("SELECT rowid AS id, * FROM movies", function (err, rows) {
// 	console.log(rows)
// })

// // db.serialize(function() {
// //   	//db.run("CREATE TABLE test3 (info TEXT, lol INT)");
// //  	//db.run("ALTER TABLE test3 ADD e INTEGER");
// //  	db.run("ALTER TABLE test3 DROP COLUMN e");
// //  	//db.run("INSERT INTO test3 (c) VALUES (32)")
// //   // var stmt = db.prepare("INSERT INTO test VALUES (?)");
// //   // for (var i = 0; i < 10; i++) {
// //   //     stmt.run("Ipsum " + i);
// //   // }
// //   // stmt.finalize();
 
// //   db.each("SELECT * FROM test3", function(err, row) {
// //       console.log(row);
// //   });
// // });
 
// db.close();

class Database {
	constructor (table) {
		this.table = table
		this.db = db
	}
	add (args) {
		var keys = []
		var values = []
		for (let field in args) {
			keys.push(field)
			if (typeof args[field] == "string") {
				args[field] = "'" + args[field] + "'"
			}
			values.push(args[field])
		}
		return new Promise(function (resolve, reject) {
			this.db.run("INSERT INTO "+ this.table + " (" + keys.join(",") + ") VALUES ("  + values.join(",") + ")", function () {
				resolve(rows)
			})

		})
	}
	get (args) {
		let keys = args.join(",")
		return new Promise((resolve, reject) => {
			this.db.all("SELECT " + keys + " FROM " + this.table, (err, rows) => {
				resolve(rows)
			})
		})
	}
	update (args, select) {
		var argsStr = []
		var selectStr = []
		for (let key in args) {
			if (typeof args[key] == "string") {
				args[key] = "'" + args[key] + "'"
			}
			argsStr.push(key + " = " + args[key])
		}
		for (let key in select) {
			if (typeof select[key] == "string") {
				select[key] = "'" + select[key] + "'"
			}
			selectStr.push(key + " = " + select[key])
		}

		db.run("UPDATE " + this.table + " SET " + argsStr.join(",") + " WHERE " + selectStr.join(","))
	}
	del (select) {
		var selectStr = []
		for (let key in select) {
			if (typeof select[key] == "string") {
				select[key] = "'" + select[key] + "'"
			}
			selectStr.push(key + " = " + select[key])
		}
		return new Promise((resolve, reject) => {
			db.run("DELETE FROM " + this.table + " WHERE " + selectStr.join(","), (err, rows) => {
				resolve(rows)
			})
		})
	}
}

var getModel = function (table) {
	return new Database (table)
}

exports.getModel = getModel